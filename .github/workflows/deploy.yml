# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CompanionNuri API Server CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
        
    # Caching dependencies
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

      
   ## create application.properties
    - name: make application.properties
      if: contains(github.ref, 'master')
      run: |
          cd ./WebProject/src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash

    ## maven build 
    - name: Build with Maven
      run: mvn -B package --file ./WebProject/pom.xml
      
    ## docker build & push
    - name: Docker build & push
      if: contains(github.ref, 'master')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/companionnuri:latest ./WebProject
          docker push ${{ secrets.DOCKER_REPO }}/companionnuri:latest

# 현재는 docker hub에 push까지 구현됨
# EC2에 직접 접속해서, 
# docker run docker run -d -p 8081:8081 --name companionnuri letsksy/companionnuri:latest
# 입력하면 서버가 뜨는 구조
# 저것까지 자동화할 예정
